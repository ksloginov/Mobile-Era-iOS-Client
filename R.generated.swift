//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 8 colors.
  struct color {
    /// Color `Freyja Color`.
    static let freyjaColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "Freyja Color")
    /// Color `Odin Color`.
    static let odinColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "Odin Color")
    /// Color `Primary Color`.
    static let primaryColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "Primary Color")
    /// Color `Primary Text Color`.
    static let primaryTextColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "Primary Text Color")
    /// Color `Secondary Text Color`.
    static let secondaryTextColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "Secondary Text Color")
    /// Color `Selection Color`.
    static let selectionColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "Selection Color")
    /// Color `Separator Color`.
    static let separatorColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "Separator Color")
    /// Color `Thor Color`.
    static let thorColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "Thor Color")
    
    /// `UIColor(named: "Freyja Color", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func freyjaColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.freyjaColor, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "Odin Color", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func odinColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.odinColor, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "Primary Color", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func primaryColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.primaryColor, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "Primary Text Color", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func primaryTextColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.primaryTextColor, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "Secondary Text Color", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func secondaryTextColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.secondaryTextColor, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "Selection Color", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func selectionColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.selectionColor, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "Separator Color", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func separatorColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.separatorColor, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "Thor Color", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func thorColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.thorColor, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")
    
    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 11 images.
  struct image {
    /// Image `checkbox-checked`.
    static let checkboxChecked = Rswift.ImageResource(bundle: R.hostingBundle, name: "checkbox-checked")
    /// Image `checkbox-unchecked`.
    static let checkboxUnchecked = Rswift.ImageResource(bundle: R.hostingBundle, name: "checkbox-unchecked")
    /// Image `filter`.
    static let filter = Rswift.ImageResource(bundle: R.hostingBundle, name: "filter")
    /// Image `info`.
    static let info = Rswift.ImageResource(bundle: R.hostingBundle, name: "info")
    /// Image `logo-white`.
    static let logoWhite = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo-white")
    /// Image `logo`.
    static let logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo")
    /// Image `map`.
    static let map = Rswift.ImageResource(bundle: R.hostingBundle, name: "map")
    /// Image `schedule`.
    static let schedule = Rswift.ImageResource(bundle: R.hostingBundle, name: "schedule")
    /// Image `speaker`.
    static let speaker = Rswift.ImageResource(bundle: R.hostingBundle, name: "speaker")
    /// Image `star_filled`.
    static let star_filled = Rswift.ImageResource(bundle: R.hostingBundle, name: "star_filled")
    /// Image `star`.
    static let star = Rswift.ImageResource(bundle: R.hostingBundle, name: "star")
    
    /// `UIImage(named: "checkbox-checked", bundle: ..., traitCollection: ...)`
    static func checkboxChecked(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checkboxChecked, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "checkbox-unchecked", bundle: ..., traitCollection: ...)`
    static func checkboxUnchecked(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checkboxUnchecked, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "filter", bundle: ..., traitCollection: ...)`
    static func filter(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.filter, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "info", bundle: ..., traitCollection: ...)`
    static func info(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.info, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "logo", bundle: ..., traitCollection: ...)`
    static func logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "logo-white", bundle: ..., traitCollection: ...)`
    static func logoWhite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logoWhite, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "map", bundle: ..., traitCollection: ...)`
    static func map(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.map, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "schedule", bundle: ..., traitCollection: ...)`
    static func schedule(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.schedule, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "speaker", bundle: ..., traitCollection: ...)`
    static func speaker(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.speaker, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "star", bundle: ..., traitCollection: ...)`
    static func star(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.star, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "star_filled", bundle: ..., traitCollection: ...)`
    static func star_filled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.star_filled, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 5 nibs.
  struct nib {
    /// Nib `FilterPopupController`.
    static let filterPopupController = _R.nib._FilterPopupController()
    /// Nib `SessionTableViewCell`.
    static let sessionTableViewCell = _R.nib._SessionTableViewCell()
    /// Nib `SessionTableViewHeader`.
    static let sessionTableViewHeader = _R.nib._SessionTableViewHeader()
    /// Nib `SessionTableViewLegendCell`.
    static let sessionTableViewLegendCell = _R.nib._SessionTableViewLegendCell()
    /// Nib `SessionsDetailsViewController`.
    static let sessionsDetailsViewController = _R.nib._SessionsDetailsViewController()
    
    /// `UINib(name: "FilterPopupController", in: bundle)`
    static func filterPopupController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.filterPopupController)
    }
    
    /// `UINib(name: "SessionTableViewCell", in: bundle)`
    static func sessionTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.sessionTableViewCell)
    }
    
    /// `UINib(name: "SessionTableViewHeader", in: bundle)`
    static func sessionTableViewHeader(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.sessionTableViewHeader)
    }
    
    /// `UINib(name: "SessionTableViewLegendCell", in: bundle)`
    static func sessionTableViewLegendCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.sessionTableViewLegendCell)
    }
    
    /// `UINib(name: "SessionsDetailsViewController", in: bundle)`
    static func sessionsDetailsViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.sessionsDetailsViewController)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 0 reuse identifiers.
  struct reuseIdentifier {
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 2 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 6 localization keys.
    struct localizable {
      /// en translation: Filter
      /// 
      /// Locales: en
      static let filter = Rswift.StringResource(key: "filter", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Room
      /// 
      /// Locales: en, nb
      static let room = Rswift.StringResource(key: "room", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nb"], comment: nil)
      /// en translation: Schedule
      /// 
      /// Locales: en, nb
      static let schedule = Rswift.StringResource(key: "schedule", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nb"], comment: nil)
      /// en translation: Show only favorite sessions?
      /// 
      /// Locales: en
      static let only_favorite_sessions = Rswift.StringResource(key: "only_favorite_sessions", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Speakers
      /// 
      /// Locales: en, nb
      static let speakers = Rswift.StringResource(key: "speakers", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nb"], comment: nil)
      /// en translation: Venue
      /// 
      /// Locales: en, nb
      static let venue = Rswift.StringResource(key: "venue", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nb"], comment: nil)
      
      /// en translation: Filter
      /// 
      /// Locales: en
      static func filter(_: Void = ()) -> String {
        return NSLocalizedString("filter", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Room
      /// 
      /// Locales: en, nb
      static func room(_: Void = ()) -> String {
        return NSLocalizedString("room", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Schedule
      /// 
      /// Locales: en, nb
      static func schedule(_: Void = ()) -> String {
        return NSLocalizedString("schedule", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Show only favorite sessions?
      /// 
      /// Locales: en
      static func only_favorite_sessions(_: Void = ()) -> String {
        return NSLocalizedString("only_favorite_sessions", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Speakers
      /// 
      /// Locales: en, nb
      static func speakers(_: Void = ()) -> String {
        return NSLocalizedString("speakers", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Venue
      /// 
      /// Locales: en, nb
      static func venue(_: Void = ()) -> String {
        return NSLocalizedString("venue", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.main` struct is generated, and contains static references to 10 localization keys.
    struct main {
      /// nb translation: Dagsplan
      /// 
      /// Locales: nb
      static let acWDTCKfTitle = Rswift.StringResource(key: "acW-dT-cKf.title", tableName: "Main", bundle: R.hostingBundle, locales: ["nb"], comment: nil)
      /// nb translation: Foredragsholdere
      /// 
      /// Locales: nb
      static let cPaGyQ4nTitle = Rswift.StringResource(key: "cPa-gy-q4n.title", tableName: "Main", bundle: R.hostingBundle, locales: ["nb"], comment: nil)
      /// nb translation: Item
      /// 
      /// Locales: nb
      static let fj7XZKvSTitle = Rswift.StringResource(key: "Fj7-XZ-KvS.title", tableName: "Main", bundle: R.hostingBundle, locales: ["nb"], comment: nil)
      /// nb translation: Item
      /// 
      /// Locales: nb
      static let fu3UAVeGTitle = Rswift.StringResource(key: "Fu3-UA-VeG.title", tableName: "Main", bundle: R.hostingBundle, locales: ["nb"], comment: nil)
      /// nb translation: Item
      /// 
      /// Locales: nb
      static let xAc3ZTETTitle = Rswift.StringResource(key: "XAc-3Z-TET.title", tableName: "Main", bundle: R.hostingBundle, locales: ["nb"], comment: nil)
      /// nb translation: Loaded by FirstViewController
      /// 
      /// Locales: nb
      static let a5M7J77LText = Rswift.StringResource(key: "A5M-7J-77L.text", tableName: "Main", bundle: R.hostingBundle, locales: ["nb"], comment: nil)
      /// nb translation: Schedule View
      /// 
      /// Locales: nb
      static let kqz1wVlDText = Rswift.StringResource(key: "KQZ-1w-vlD.text", tableName: "Main", bundle: R.hostingBundle, locales: ["nb"], comment: nil)
      /// nb translation: Speakers View
      /// 
      /// Locales: nb
      static let zEqFUWV5Text = Rswift.StringResource(key: "zEq-FU-wV5.text", tableName: "Main", bundle: R.hostingBundle, locales: ["nb"], comment: nil)
      /// nb translation: Spillested
      /// 
      /// Locales: nb
      static let qhNXTVAYTitle = Rswift.StringResource(key: "QhN-xT-vAY.title", tableName: "Main", bundle: R.hostingBundle, locales: ["nb"], comment: nil)
      /// nb translation: Venue View
      /// 
      /// Locales: nb
      static let aanFjLO2Text = Rswift.StringResource(key: "aan-fj-lO2.text", tableName: "Main", bundle: R.hostingBundle, locales: ["nb"], comment: nil)
      
      /// nb translation: Dagsplan
      /// 
      /// Locales: nb
      static func acWDTCKfTitle(_: Void = ()) -> String {
        return NSLocalizedString("acW-dT-cKf.title", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// nb translation: Foredragsholdere
      /// 
      /// Locales: nb
      static func cPaGyQ4nTitle(_: Void = ()) -> String {
        return NSLocalizedString("cPa-gy-q4n.title", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// nb translation: Item
      /// 
      /// Locales: nb
      static func fj7XZKvSTitle(_: Void = ()) -> String {
        return NSLocalizedString("Fj7-XZ-KvS.title", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// nb translation: Item
      /// 
      /// Locales: nb
      static func fu3UAVeGTitle(_: Void = ()) -> String {
        return NSLocalizedString("Fu3-UA-VeG.title", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// nb translation: Item
      /// 
      /// Locales: nb
      static func xAc3ZTETTitle(_: Void = ()) -> String {
        return NSLocalizedString("XAc-3Z-TET.title", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// nb translation: Loaded by FirstViewController
      /// 
      /// Locales: nb
      static func a5M7J77LText(_: Void = ()) -> String {
        return NSLocalizedString("A5M-7J-77L.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// nb translation: Schedule View
      /// 
      /// Locales: nb
      static func kqz1wVlDText(_: Void = ()) -> String {
        return NSLocalizedString("KQZ-1w-vlD.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// nb translation: Speakers View
      /// 
      /// Locales: nb
      static func zEqFUWV5Text(_: Void = ()) -> String {
        return NSLocalizedString("zEq-FU-wV5.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// nb translation: Spillested
      /// 
      /// Locales: nb
      static func qhNXTVAYTitle(_: Void = ()) -> String {
        return NSLocalizedString("QhN-xT-vAY.title", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// nb translation: Venue View
      /// 
      /// Locales: nb
      static func aanFjLO2Text(_: Void = ()) -> String {
        return NSLocalizedString("aan-fj-lO2.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _SessionTableViewCell.validate()
      try _FilterPopupController.validate()
    }
    
    struct _FilterPopupController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "FilterPopupController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "checkbox-checked", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'checkbox-checked' is used in nib 'FilterPopupController', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _SessionTableViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SessionTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> SessionTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SessionTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "star", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'star' is used in nib 'SessionTableViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _SessionTableViewHeader: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SessionTableViewHeader"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> SessionTableViewHeader? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SessionTableViewHeader
      }
      
      fileprivate init() {}
    }
    
    struct _SessionTableViewLegendCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SessionTableViewLegendCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> SessionTableViewLegendCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SessionTableViewLegendCell
      }
      
      fileprivate init() {}
    }
    
    struct _SessionsDetailsViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SessionsDetailsViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try main.validate()
      try launchScreen.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIKit.UIImage(named: "logo") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if UIKit.UIImage(named: "logo-white") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo-white' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UITabBarController
      
      let bundle = R.hostingBundle
      let name = "Main"
      
      static func validate() throws {
        if UIKit.UIImage(named: "info") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'info' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "schedule") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'schedule' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "map") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'map' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "speaker") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'speaker' is used in storyboard 'Main', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
